plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    runs {
        client_mixin {
            client()
            ideConfigGenerated true
            name = "[${project.archivesBaseName}] Client - (Mixin Swap)"
            source sourceSets.main
            vmArg "-Dmixin.debug.export=true"

            try {
                afterEvaluate {
                    def mixinDep = this.configurations.compileClasspath
                            .allDependencies
                            .findAll { it.name == "sponge-mixin" }
                            .first()

                    if (mixin != null) {
                        def mixinPath = this.configurations.compileClasspath.files(mixinDep).first().path;

                        println(mixinPath)

                        vmArg("-javaagent:\"${mixinPath}\"")

                        println("[Info]: Mixin Hotswap Run should be working")
                    } else {
                        println("[Warning]: Unable to locate file path for Mixin Jar, HotSwap Run will not work!!!")
                    }
                }
            } catch (Exception e) {
                println("[Error]: MixinHotswap Run had a issue!")
                e.printStackTrace()
            }
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    modImplementation("com.terraformersmc:modmenu:${rootProject.modmenu_version}") {
        exclude module: "fabric-api"
    }

    modCompileOnly("maven.modrinth:bedrockify:${rootProject.bedrockify_version}")

    modImplementation ("dev.isxander:yet-another-config-lib:${rootProject.yacl_version}-fabric")
    //include "dev.isxander.yacl:yet-another-config-lib-fabric:${rootProject.yacl_version}"

    //modLocalRuntime ("maven.modrinth:fastload:3.4.0")

    //modLocalRuntime ("com.github.quiqueck:BCLib:3.0.13")
    //modLocalRuntime ("maven.modrinth:betterend:4.0.10")

    //modImplementation ("com.github.apace100:origins-fabric:v1.10.0")

//    modRuntimeOnly("maven.modrinth:auth-me:7.0.2+1.20")

    modRuntimeOnly("me.shedaniel.cloth:cloth-config-fabric:11.1.106") {
        exclude module: 'modmenu'
        exclude module: 'fabric-api'
    }

    //modImplementation ("maven.modrinth:wynntils:VLZyj8bb")

    //modRuntimeOnly("com.github.wynntils:hades:v0.5.1") { transitive false }
    //modRuntimeOnly("com.github.wynntils:antiope:v0.2.2") { transitive false }

    //modRuntimeOnly("com.github.llamalad7.mixinextras:mixinextras-fabric:0.2.0-beta.9")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "fabric"
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
